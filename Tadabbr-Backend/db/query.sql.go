// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createReport = `-- name: CreateReport :exec
INSERT INTO reports (
    poem_id,edit,edit_by_id
) VALUES(
    ?,?,?
)
`

type CreateReportParams struct {
	PoemID   int64
	Edit     string
	EditByID sql.NullInt64
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) error {
	_, err := q.db.ExecContext(ctx, createReport, arg.PoemID, arg.Edit, arg.EditByID)
	return err
}

const getDistinctPoems = `-- name: GetDistinctPoems :many
SELECT DISTINCT poetry FROM poems
`

func (q *Queries) GetDistinctPoems(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDistinctPoems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var poetry string
		if err := rows.Scan(&poetry); err != nil {
			return nil, err
		}
		items = append(items, poetry)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistinctPoets = `-- name: GetDistinctPoets :many
SELECT DISTINCT poet FROM poems
`

func (q *Queries) GetDistinctPoets(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getDistinctPoets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var poet sql.NullString
		if err := rows.Scan(&poet); err != nil {
			return nil, err
		}
		items = append(items, poet)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistinctSources = `-- name: GetDistinctSources :many
SELECT DISTINCT tafsir FROM poems
`

func (q *Queries) GetDistinctSources(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDistinctSources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tafsir string
		if err := rows.Scan(&tafsir); err != nil {
			return nil, err
		}
		items = append(items, tafsir)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistinctVerses = `-- name: GetDistinctVerses :many
SELECT DISTINCT verse FROM poems
`

func (q *Queries) GetDistinctVerses(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getDistinctVerses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var verse string
		if err := rows.Scan(&verse); err != nil {
			return nil, err
		}
		items = append(items, verse)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoemById = `-- name: GetPoemById :one
SELECT id, poet, poetry, context_before, context_after, verse, surah, tafsir, verse_key FROM poems WHERE id = ? LIMIT 1
`

func (q *Queries) GetPoemById(ctx context.Context, id int64) (Poem, error) {
	row := q.db.QueryRowContext(ctx, getPoemById, id)
	var i Poem
	err := row.Scan(
		&i.ID,
		&i.Poet,
		&i.Poetry,
		&i.ContextBefore,
		&i.ContextAfter,
		&i.Verse,
		&i.Surah,
		&i.Tafsir,
		&i.VerseKey,
	)
	return i, err
}

const getPoemRowByPoem = `-- name: GetPoemRowByPoem :one
SELECT id, poet, poetry, context_before, context_after, verse, surah, tafsir, verse_key FROM poems WHERE poetry = ? LIMIT 1
`

func (q *Queries) GetPoemRowByPoem(ctx context.Context, poetry string) (Poem, error) {
	row := q.db.QueryRowContext(ctx, getPoemRowByPoem, poetry)
	var i Poem
	err := row.Scan(
		&i.ID,
		&i.Poet,
		&i.Poetry,
		&i.ContextBefore,
		&i.ContextAfter,
		&i.Verse,
		&i.Surah,
		&i.Tafsir,
		&i.VerseKey,
	)
	return i, err
}

const getPoemsRowByVerse = `-- name: GetPoemsRowByVerse :one
SELECT id, poet, poetry, context_before, context_after, verse, surah, tafsir, verse_key FROM poems WHERE verse = ? LIMIT 1
`

func (q *Queries) GetPoemsRowByVerse(ctx context.Context, verse string) (Poem, error) {
	row := q.db.QueryRowContext(ctx, getPoemsRowByVerse, verse)
	var i Poem
	err := row.Scan(
		&i.ID,
		&i.Poet,
		&i.Poetry,
		&i.ContextBefore,
		&i.ContextAfter,
		&i.Verse,
		&i.Surah,
		&i.Tafsir,
		&i.VerseKey,
	)
	return i, err
}

const getPoemsRowByVerseKey = `-- name: GetPoemsRowByVerseKey :many
SELECT id, poet, poetry, context_before, context_after, verse, surah, tafsir, verse_key FROM poems WHERE verse_key = ?
`

func (q *Queries) GetPoemsRowByVerseKey(ctx context.Context, verseKey string) ([]Poem, error) {
	rows, err := q.db.QueryContext(ctx, getPoemsRowByVerseKey, verseKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poem
	for rows.Next() {
		var i Poem
		if err := rows.Scan(
			&i.ID,
			&i.Poet,
			&i.Poetry,
			&i.ContextBefore,
			&i.ContextAfter,
			&i.Verse,
			&i.Surah,
			&i.Tafsir,
			&i.VerseKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReports = `-- name: ListReports :many
SELECT id, poem_id, edit, checked, edit_by_id, created_at FROM reports WHERE checked=0
`

func (q *Queries) ListReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, listReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.PoemID,
			&i.Edit,
			&i.Checked,
			&i.EditByID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
